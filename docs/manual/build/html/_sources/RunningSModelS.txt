.. index:: Running SModelS

.. |invisible compression| replace:: :ref:`invisible compression <invComp>`
.. |mass compression| replace:: :ref:`mass compression <massComp>`
.. |element| replace:: :ref:`element <element>`
.. |elements| replace:: :ref:`elements <element>`
.. |topology| replace:: :ref:`topology <topology>`
.. |topologies| replace:: :ref:`topologies <topology>`
.. |decomposition| replace:: :doc:`decomposition <Decomposition>`
.. |theory predictions| replace:: :doc:`theory predictions <TheoryPredictions>`
.. |theory prediction| replace:: :doc:`theory prediction <TheoryPredictions>`
.. |constraint| replace:: :ref:`constraint <ULconstraint>`
.. |constraints| replace:: :ref:`constraints <ULconstraint>`
.. |runSModelS| replace:: :ref:`runSModelS.py <runSModelS>`
.. |database| replace:: :ref:`database <Database>`
.. |output| replace:: :ref:`output <smodelsOutput>`
.. |results| replace:: :ref:`experimental results <ExpResult>`
.. |txnames| replace:: :ref:`txnames <TxName>`
.. |EM| replace:: :ref:`EM-type <EMtype>`
.. |UL| replace:: :ref:`UL-type <ULtype>`
.. |EMr| replace:: :ref:`EM-type result <EMtype>`
.. |ULr| replace:: :ref:`UL-type result <ULtype>`
.. |EMrs| replace:: :ref:`EM-type results <EMtype>`
.. |ULrs| replace:: :ref:`UL-type results <ULtype>`
.. |ExpRes| replace:: :ref:`Experimental Result<ExpResult>`
.. |ExpRess| replace:: :ref:`Experimental Results<ExpResult>`
.. |expres| replace:: :ref:`experimental result<ExpResult>`
.. |express| replace:: :ref:`experimental results<ExpResult>`
.. |Dataset| replace:: :ref:`Data Set<DataSet>`
.. |Datasets| replace:: :ref:`Data Sets<DataSet>`
.. |dataset| replace:: :ref:`data set<DataSet>`
.. |datasets| replace:: :ref:`data sets<DataSet>`
.. |parameters| replace:: :ref:`parameters file <parameterFile>`
.. |ssigBRe| replace:: :math:`\sum \sigma \times BR \times \epsilon`


.. _runningSModelS:

Running SModelS
===============

For the first-time user, SModelS ships with a command-line tool :ref:`runSModelS.py <runSModelS>`, which
takes an SLHA or LHE file as input (see :doc:`Basic Input <BasicInput>`), and reports on the SMS
|decomposition| and |theory predictions| in several :ref:`output formats <smodelsOutput>`.

For users more familiar with Python and the SModelS basics, an example
code :ref:`Example.py <exampleCode>` is provided showing how to access
the main SModelS functionalities: :ref:`decomposition <Decomposition>`, |database|
and :ref:`computation of theory predictions <TheoryPredictions>`.

The commandline tool (:ref:`runSModelS.py <runSModelS>`) and the example Python
code (:ref:`Example.py <exampleCode>`) are described below.

.. _runSModelS:

runSModelS.py
-------------


*runSModelS.py* covers several different applications of the SModelS functionality,
with the option of turning various features on or off, as well as
setting the :ref:`basic parameters <parameterFile>`.

These functionalities include detailed checks of input SLHA files,
running the |decomposition|,
evaluating the :doc:`theory predictions <TheoryPredictions>` and comparing them to the experimental
limits available in the |database|,
determining :ref:`missing topologies <topCoverage>` and printing the |output|
in several available formats.


**The usage of runSModelS is:**

   runSModelS.py [-h] -f FILENAME [-p PARAMETERFILE] [-o OUTPUTDIR] [-d] [-t] [-V] [-c] [-v VERBOSE] [-T TIMEOUT]

*arguments*:
  -h, --help            show this help message and exit
  -f FILENAME, --filename FILENAME
                        name of SLHA or LHE input file, necessary input, if
                        directory is given, loop over all files in the
                        directory
  -p PARAMETERFILE, --parameterFile PARAMETERFILE
                        name of parameter file, optional argument, if not set,
                        use all parameters from etc/parameters_default.ini
  -o OUTPUTDIR, --outputDir OUTPUTDIR
                        name of output directory, optional argument, default is: results
  -d, --development     enable development output
  -t, --force_txt       force loading the text database
  -V, --version         show program's version number and exit
  -c, --run-crashreport
                        parse crash report file and use its contents for a
                        SModelS run. Supply the crash file simply via '--
                        filename myfile.crash'
  -v VERBOSE, --verbose VERBOSE
                        verbosity level. accepted values are: debug, info,
                        warning, error.
  -T TIMEOUT, --timeout TIMEOUT
                        define a limit on the running time (in secs).If not
                        set, run without a time limit




In some more detail:

* *-f*: path to the input (SLHA or LHE) file or a folder containing input files.
* *-p*: path to the |parameters|, where most options are defined.
* *-o*: path to the output folder, where the output files will be stored. The default folder is ./results .
* *-d*: if set, SModelS will run in development mode and exit if any errors are found.
* *-c*: if set, SModelS will in run in crash mode. It takes as input a .crash file in order to reproduce the crash error.
* *-v*: sets the verbosity level (debug, info, warning, error). Default value is info.
* *-T*: (int) define a time limit for the running time (in secs).

A typical
usage example is: ::

   runSModelS.py -f lightSquarks.slha -p parameters.ini -o ./

The resulting |output| will be generated in the current folder, according to the printer options set in the 
|parameters|.


.. _parameterFile:


The Parameters File
^^^^^^^^^^^^^^^^^^^

The basic options and parameters used by *runSModelS.py* are defined in the parameters file.
An example parameter file, including all available parameters together
with a short description, is stored in :download:`parameters.ini <images/parameters.ini>`.
If no parameter file is specified the default parameters stored in 
:download:`/etc/parameters_default.ini <images/parameters_default.ini>` are used.
Below we give more detailed information about each entry in the parameters file.




* *path*: relevant folder paths

  * **databasePath**: the absolute (or relative) path to the |database|. The user can supply either the directory name of the database, or the path to the :ref:`pickle file <databasePickle>`.
|
* *options*: main options for turning SModelS features on and off

  * **inputType** (SLHA/LHE): determines the type of input file (see :doc:`Basic Input <BasicInput>`). 
    Must be SLHA for a SLHA input file or LHE for a LHE input file.
  * **checkInput** (True/False): if True, *runSModelS.py* will run the :ref:`file check tool <fileChecks>` on the input file and verify if the input contains all the necessary information.
  * **doInvisible** (True/False): turns |invisible compression| on and off during the |decomposition|.
    Set to False to turn |invisible compression| off.
  * **doCompress** (True/False): turns |mass compression| on and off during the |decomposition|.
    Set to False to turn |mass compression| off.
  * **testCoverage** (True/False): set to True to run the :ref:`coverage <topCoverage>` tool.
|
* *parameters*: basic parameter values for running SModelS

  * **sigmacut** (float): minimum value for an |element| weight (in fb). :ref:`Elements <element>` with a weight below sigmacut are neglected during |decomposition| (see :ref:`Minimum Decomposition Weight <minweight>`). Depending on the input model, the running time may increase considerably if sigmacut is too low, while too large values might eliminate relevant |elements|.  
  * **minmassgap** (float): maximum mass difference value (in GeV) for perfoming :ref:`mass compression <massComp>`.
    *Only used if doCompress = True*
  * **maxcond** (float): maximum allowed value (in the [0,1] interval) for the violation of :ref:`upper limit conditions <ULconditions>`. A zero value means the conditions are strictly enforced, while 1 means the conditions are never enforced. 
    *Only relevant for printing the* :ref:`output summary <fileOut>`.
  * **ncpus** (int): number of CPUs. When processing multiple SLHA/LHE files, SModelS can run in a parallelized fashion, splitting up the input files in equal chunks. "-1" is equal to the number of CPU cores of the machine.
|   
* *database*: allows for selection of a subset of :ref:`experimental results <ExpResult>` from the |database|

  * **analyses** (list of results): set to all to use all available results. If a list of :ref:`experimental results <ExpResult>`
    are given, only these analyses will be used. For instance, setting analyses = CMS-PAS-SUS-13-008,ATLAS-CONF-2013-024
    will only use the |results| from `CMS-PAS-SUS-13-008 <https://twiki.cern.ch/twiki/bin/view/CMSPublic/PhysicsResultsSUS13008>`_
    and `ATLAS-CONF-2013-024 <https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/CONFNOTES/ATLAS-CONF-2013-024/>`_.
  * **txnames** (list of topologies): set to all to use all available simplified model |topologies|. The |topologies| are labeled according to the :ref:`txname convention <TxName>`. 
    If a list of |txnames| are given, only the corresponding |topologies| will be considered. For instance, setting txnames = T2 will
    only consider |results| containing upper limits for :math:`[[[jet]],[[jet]]]` and the |output| will only contain constraints for this topology.
    *A list of all* |topologies| *and their corresponding* |txnames| *can be found* `here <http://smodels.hephy.at/wiki/SmsDictionary>`_
  * **dataselector** (list of datasets): set to all to use all available |datasets|. If dataselector = upperLimit (efficiencyMap), only |ULrs| (|EMrs|) will be used. Furthermore, if
    a list of signal regions (|datasets|) is given, only the |results| containing these datasets will be used. For instance, if dataselector = SRA mCT150,SRA mCT200, only
    these signal regions will be used. 
|
* *printer*: main options for the |output| format

  * **outputType** (list of outputs): use to list all the output formats to be generated. Available output formats are: summary, stdout, log, python, xml (type log redirects stdout to .log output file)
|
* *stdout-printer*: options for the stdout printer

  * **printDatabase** (True/False): set to True to print the list of selected |results| to stdout. False elsewise. 
  * **addAnaInfo** : (True/False): set to True to include detailed information about the |txnames| tested by each :ref:`experimental result <ExpResult>`. *Only used if printDatabase=True*.  
  * **printDecomp** : (True/False): set to True to print basic information from the |decomposition| (|topologies|, total weights, ...). *Only used for the stdout or log-type output*.
  * **addElmentInfo** : (True/False): set to True to include detailed information about the |elements| generated by the |decomposition|. *Only used if printDecomp=True and for the stdout or log-type output*.
  * **printExtendedResults** : (True/False): set to True to print basic information about the |results| being used 
    (list of |results|, luminosities,...). *Only used for the stdout or log-type output*.
    
|
* *summary-printer*: options for the summary printer

  * **expandedSummary** (True/False): set True to include in the summary output all applicable |results|, False for only the strongest one. *Only used for the summary-type output*.
|
* *python-printer*: options for the python printer

  * **addElementList** (True/False): set True to include in the python output all information about all |elements| generated in the |decomposition|. If set to True the
    output file can be quite large. *Only used for the python or xml-type output*.
|
* *xml-printer*: options for the xml printer

  * **addElementList** (True/False): set True to include in the xml output all information about all |elements| generated in the |decomposition|. If set to True the
    output file can be quite large. *Only used for the python or xml-type output*.
  
  


.. _smodelsOutput:

The Output
^^^^^^^^^^

The results of |runSModelS| are printed to the formats specified by the **outputType** in the  |parameters|.
Below we explain in detail the information contained in each type of output. For simplicity we will assume
that all printer options are set to True, so the output information is maximal. 

.. _screenOut:

Screen (Stdout) Output
**********************

The stdout (or |logOut|) are intended to provide extensive information on the SModelS results.
It is most convenient if the input is a single file and not a folder, since the output is quite extense.
If all the options in **stdout-printer** are set to True (see |parameters|), the screen output contains the following information:

* information about the basic input parameters and the status of the run:

.. literalinclude:: /images/screenoutput.txt
   :lines: 1-8

* a list of all the |express| considered (if **printDatabase** = True). Note that this list correspond to all the results
  selected in the *database* options (see |parameters|). If **addAnaInfo** = True,
  for each |express| entry a list of all the |elements| tested by the analysis
  is also shown using the :ref:`bracket notation <bracketNotation>`:

.. literalinclude:: /images/screenoutput.txt
   :lines: 10-16,737-745    

  
* a full list of the |topologies| generated by the |decomposition| (if **printDecomp** = True). Each |topology| entry
  contains basic information about the |topology| as well as the number of |elements| with this |topology|
  and the sum over all the |elements| weights. If **addElmentInfo** = True, the |elements| belonging to each
  |topology| are also explicitly shown, as well as the |element|'s mass, :ref:`final states <final states>`,
  weight, the PIDs of the :ref:`intermediate particles <odd states>` contributing to the |element| and the element ID:

.. literalinclude:: /images/screenoutput.txt
   :lines: 933-991
   

* a list of all the |theory predictions| obtained (if **printResults** = True). and the corresponding |expres| upper limit .
  For each |theory prediction| entry, the corresponding |expres| *id*, its *sqrts*, the list of :ref:`condition values <ULconditions>`
  (if applicable), the |theory prediction| value (|ssigBRe|), the corresponding experimental upper limit and their ratio
  (see :ref:`confronting predictions <confrontPredictions>`). Furthermore, the corresponding signal region (|dataset|) for
  |EMrs| is also shown: 
  
.. literalinclude:: /images/screenoutput.txt
   :lines: 17896-17915
   
* possible (mostly harmless) warnings [*]_

.. literalinclude:: /images/screenoutput.txt
   :lines: 1,3,7   


.. _fileOut:

Summary File Output
*******************

If both **expandedSummary** and **addConstraintInfo** are set to True
(see :ref:`parameter file <parameterFile>`), the file output contains the following information:

* a status flag for the input file and the decomposition indicating possible problems. 
  These flags should be consulted in case of unexpected/missing results:

.. literalinclude:: /images/summary.txt
   :lines: 1-2

* the name of the input file and a few important :ref:`input parameters <parameterFile>`:


.. literalinclude:: /images/summary.txt
   :lines: 3-6

* the version of the :doc:`database <Database>` used to obtain the results:


.. literalinclude:: /images/summary.txt
   :lines: 7


* the list of |analyses| which constrain the input model.
  For each |analysis|, the :doc:`analysis name <AnalysesNames>`, the value of the |analysis|
  center-of-mass energy (*sqrts*), the amount of :ref:`condition <ULconditions>` violation,
  the |theory prediction| value (value for the relevant signal cross-section),
  the experimental upper limit and the ratio (*r*) of the signal cross-section and the
  upper limit (:math:`r = theory\, prediction/upper\, limit`) are printed. 
  A value of :math:`r\ge 1` indicates that the model is likely excluded by the corresponding |analysis|.
  
.. literalinclude:: /images/summary.txt
   :lines: 8-11
   
* if  **addConstraintInfo** = True, the :ref:`analysis constraint <ULconstraint>` in :ref:`bracket notation <bracketNotation>`
  is also included just below the |analysis| entry:
  
.. literalinclude:: /images/summary.txt
   :lines: 12
     
* The last line of this block gives the maximum value of *r*, :math:`R = max(r)`.  

.. literalinclude:: /images/summary.txt
   :lines: 45-46

* if **findMissingTopos** = True,  a list of the :ref:`missing topologies <topCoverage>` and their cross sections at the given
  value of *sqrts* is also included. This list represents the |elements| or sum of |elements| 
  (shown using the :ref:`bracket notation <bracketNotation>`) with the highest
  weights (:math:`\sigma \times BR`) which are not tested by any |analysis|:


.. literalinclude:: /images/summary.txt
   :lines: 48-53

.. _exampleCode:

Example.py
----------

Although :ref:`runSModelS.py <runSModelS>` provides the main SModelS features with a command line interface, 
users more familiar with Python and the SModelS language may prefer to write their own main program. 
A simple example code for this purpose is provided in :download:`examples/Example.py`.
Below we go step-by-step through this example code:

* *Import the SModelS methods*. Import the methods to be used later. If the file is not located in the smodels
  installation folder simply add "sys.path.append(<smodels installation path>)" before importing smodels

.. literalinclude:: /examples/Example.py
   :lines: 11-19

* *Set the address to the dabase*. Specify where the SModelS :doc:`database <Database>` has been installed

.. literalinclude:: /examples/Example.py
   :lines: 21-22
   
* *Path to the input file*. Specify the location of the input file. It must be a SLHA or LHE file (see :ref:`Basic Input <BasicInput>`)

.. literalinclude:: /examples/Example.py
   :lines: 32
   
* *Define the basic parameters for* |decomposition|. Specify the values of :ref:`sigmacut <minweight>` and :ref:`minmassgap <massComp>`:   

.. literalinclude:: /examples/Example.py
   :lines: 36-37
   
* *Perform the* |decomposition|. Depending on the type
  of input format, choose either the `slhaDecomposer.decompose <../../../documentation/build/html/theory.html#theory.slhaDecomposer.decompose>`_ or
  `lheDecomposer.decompose <../../../documentation/build/html/theory.html#theory.slhaDecomposer.decompose>`_ method. The **doCompress** and **doInvisible** options turn on/off the |mass compression| and |invisible compression|, respectively
  
.. literalinclude:: /examples/Example.py
   :lines: 40
   
* *Print the decomposition output*. Set outputLevel = 0 (no output), 1 (basic output) or 2 (extended output)   

.. literalinclude:: /examples/Example.py
   :lines: 44
   
* *Load the the analyses* :ref:`database <Database>`. Load the experimental |analyses| and store the list of analyses   

.. literalinclude:: /examples/Example.py
   :lines: 47
   
* *Compute the* |theory predictions|. For each analysis in list of analyses compute the |theory predictions|. The output
  is a list of `theory prediction objects <../../../documentation/build/html/theory.html#theory.theoryPrediction.TheoryPrediction>`_
  (for each analysis) with results for each :ref:`cluster <ULcluster>`
  
.. literalinclude:: /examples/Example.py
   :lines: 50
   
* *Print the output*. Loop over all analyses and results and print the |theory predictions| information

.. literalinclude:: /examples/Example.py
   :lines: 53-61
   
* *Get analysis upper limit*. For each anlysis and |theory prediction|, obtain the experimental upper limit. This value can
  be compared to the |theory prediction| value to decide if a model is excluded or not.

.. literalinclude:: /examples/Example.py
   :lines: 64

.. [*] For an SLHA :ref:`input file <BasicInput>`, the decay of :ref:`final states <final states>` (or Z\ :sub:`2`-even particles
       such as the Higgs, W,...) are always ignored during the decomposition. Furthermore, if there are two cross-sections
       at different calculation order (say LO and NLO) for the same process, only the highest order is used.
.. [*] The list of |elements| can be extremely long. Try setting **addElmentInfo** = False and/or **printDecomp** = False to obtain
       a smaller output.       
